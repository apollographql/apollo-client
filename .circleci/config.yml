version: 2.1

orbs:
  secops: apollo/circleci-secops-orb@2.0.6

jobs:
  # Filesize:
  #   docker:
  #     - image: cimg/node:20.2.0
  #   steps:
  #     - checkout
  #     - run: npm version
  #     - run: npm ci
  #     - run: npm run bundlesize

  Lint:
    docker:
      - image: cimg/node:21.5.0
    steps:
      - checkout
      - run: npm version
      - run: npm ci
      - run: npm run lint

  Formatting:
    docker:
      - image: cimg/node:21.5.0
    steps:
      - checkout
      - run: npm ci
      - run: npm run check:format

  Tests:
    docker:
      - image: cimg/node:21.5.0
    steps:
      - checkout
      - run: npm run ci:precheck
      - run: npm version
      - run: npm ci
      - run:
          name: Jest suite with coverage
          command: npm run test:ci
          environment:
            JEST_JUNIT_OUTPUT_FILE: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  BuildTarball:
    docker:
      - image: cimg/node:21.5.0
    steps:
      - checkout
      - run: npm run ci:precheck
      - run: npm version
      - run: npm ci
      - run: npm run build && cd dist && mv "$(npm pack --json | jq --raw-output '.[0].filename')" apollo-client.tgz
      - persist_to_workspace:
          root: dist
          paths:
            - apollo-client.tgz

  IntegrationTests:
    parameters:
      framework:
        type: string
    docker:
      - image: cimg/node:21.5.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: npm version
      - run:
          command: npm run ci-preparations --workspace=<< parameters.framework >> --if-present
          working_directory: integration-tests
      - run:
          command: npm install @apollo/client@/tmp/workspace/apollo-client.tgz --workspace=<< parameters.framework >>
          working_directory: integration-tests
      - run:
          command: npx playwright install-deps
          working_directory: integration-tests
      - run:
          command: npm run build --workspace=<< parameters.framework >> --if-present
          working_directory: integration-tests
      - run:
          command: npm run test --workspace=<< parameters.framework >>
          working_directory: integration-tests

workflows:
  Build and Test:
    jobs:
      # - Filesize
      - Tests
      - Formatting
      - Lint
      - BuildTarball
      - IntegrationTests:
          name: Integration Test << matrix.framework >>
          requires:
            - BuildTarball
          matrix:
            parameters:
              framework:
                - cra4
                - cra5
                - next
                - dual-module-test-esm
                - dual-module-test-standard
                - vite
                - vite-swc
                # -browser-esm would need a package publish to npm/CDNs
  security-scans:
    jobs:
      - secops/gitleaks:
          context:
            - platform-docker-ro
            - github-orb
            - secops-oidc
          git-base-revision: <<#pipeline.git.base_revision>><<pipeline.git.base_revision>><</pipeline.git.base_revision >>
          git-revision: << pipeline.git.revision >>
      - secops/semgrep:
          context:
            - secops-oidc
            - github-orb
          git-base-revision: <<#pipeline.git.base_revision>><<pipeline.git.base_revision>><</pipeline.git.base_revision >>
