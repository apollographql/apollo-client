version: 2

jobs:
  Danger:
    docker: [ { image: 'circleci/node:8' } ]
    steps:
      - checkout
      - run: npm i
      # with this we can see if there are any changes to packages (or just docs)
      # if there are test changes, this will return exit code 0 and keep the runner
      # if not, the last run (with when: on_fail) will pick up and flag the build
      # as green!
      - run: check-if-folder-contents-changed-in-git-commit-range packages/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed Danger
          command: echo 'nothing changed that danger cares about'
          when: on_fail
      - run: npm run danger

  Docs:
    docker: [ { image: 'circleci/node:8' } ]
    steps:
      - checkout
      - run: npm i
      # we skip any potential docs tests because the netlify build
      # will fail if there is some other problem
      # this is a place to verify the build including crawling for broken links
      - run: check-if-folder-contents-changed-in-git-commit-range docs/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed Docs
          command: echo 'nothing changed within the docs folder'
          when: on_fail
      # XXX replace with running and crawling docs site
      - run: cd docs && npm i && npm run build
      
  Filesize:
    docker: [ { image: 'circleci/node:8' } ]
    steps:
      - checkout
      - run: npm i
      - run: check-if-folder-contents-changed-in-git-commit-range packages/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed Filesize
          command: echo 'nothing changed within packages to recalculate'
          when: on_fail
      - run: npm run compile
      - run: npm run filesize
      
  Typecheck:
    docker: [ { image: 'circleci/node:8' } ]
    steps:
      - checkout
      - run: npm i
      - run: check-if-folder-contents-changed-in-git-commit-range packages/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed type checking
          command: echo 'nothing changed within packages to re check'
          when: on_fail
      - run: npm run type-check

   Apollo Client:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: check-if-folder-contents-changed-in-git-commit-range packages/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=apollo-client -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo Boost:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: check-if-folder-contents-changed-in-git-commit-range packages/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=apollo-boost -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo Cache:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: check-if-folder-contents-changed-in-git-commit-range packages/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=apollo-cache -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo InMemory Cache:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: check-if-folder-contents-changed-in-git-commit-range packages/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=apollo-cache-inmemory -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo Utilities:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: check-if-folder-contents-changed-in-git-commit-range packages/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=apollo-utilities -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  GraphQL Anywhere:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: check-if-folder-contents-changed-in-git-commit-range packages/**/* $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=graphql-anywhere -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

workflows:
  version: 2
  Build and Test:
    jobs:
      - Danger
      - Docs
      - Filesize
      - Typecheck
      - Apollo Client
      - Apollo Boost
      - Apollo Cache
      - Apollo InMemory Cache
      - Apollo Utilities
      - GraphQL Anywhere

