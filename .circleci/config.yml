version: 2.1

jobs:
  Filesize:
    docker:
      - image: circleci/node:16.13.1
    steps:
      - checkout
      - run: npm run ci:precheck
      - restore_cache:
          keys:
            # When lock file changes, use increasingly general patterns to
            # restore cache
            - npm-v3-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v3-{{ .Branch }}-
            - npm-v3-
      - run: npm version
      - run: npm ci
      - save_cache:
          key: npm-v3-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            # This should cache the npm cache instead of node_modules, which is
            # needed because npm ci actually removes node_modules before
            # installing to guarantee a clean slate.
            - ~/.npm
      - run: npm run bundlesize

  Tests-React:
    parameters:
      react-version:
        type: string
    docker:
      - image: circleci/node:16.13.1
    steps:
      - checkout
      - run: npm run ci:precheck
      - restore_cache:
          keys:
            # When lock file changes, use increasingly general patterns to
            # restore cache
            - npm-v3-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v3-{{ .Branch }}-
            - npm-v3-
      - run: npm version
      - run: npm ci
      - when:
          condition:
            equal: [ "18", << parameters.react-version >> ]
          steps:
            # package.json specifies React/ReactDOM v17 and Testing Library v12
            # for React 18 tests we no-save + force install v18/v13 respectively
          - run: npm install --no-save --force react@<< parameters.react-version >> react-dom@<< parameters.react-version >> @testing-library/react@13
      - save_cache:
          key: npm-v3-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            # This should cache the npm cache instead of node_modules, which is
            # needed because npm ci actually removes node_modules before
            # installing to guarantee a clean slate.
            - ~/.npm
      - run:
          name: Jest suite for React << parameters.react-version >> with coverage
          # Run test:ci command specific to React version,
          # which ignores the tests for the unspecified version(s)
          command: npm run test:ci:react-<< parameters.react-version >>
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results-react-<< parameters.react-version >>.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

workflows:
  version: 2
  Build and Test:
    jobs:
      - Filesize
      - Tests-React:
          matrix:
            parameters:
              react-version: ["17", "18"]
