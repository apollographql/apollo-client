import assert from "assert";
import fs from "fs";
import path from "path";
import { createRequire } from "node:module";

const distRoot = path.join(import.meta.dirname, "..", "dist");
const versionPath = path.join(distRoot, "version.js");

const require = createRequire(import.meta.url);

import pkgJson from "../package.json" with { type: "json" };

const { version } = pkgJson;
assert.strictEqual(
  typeof version,
  "string",
  '"version" field missing from package.json'
);

export function updateVersion() {
  const updated = fs
    .readFileSync(versionPath, "utf8")
    .replace(/\blocal\b/, version);

  assert.notEqual(
    updated.indexOf(version),
    -1,
    "Failed to update dist/version.js with @apollo/client version"
  );

  fs.writeFileSync(versionPath, updated);
}

export function verifyVersion() {
  const { ApolloClient, InMemoryCache } = require(
    path.join(distRoot, "index.js")
  );

  // Though this may seem like overkill, verifying that ApolloClient is
  // constructible in Node.js is actually pretty useful, too!
  const client = new ApolloClient({
    cache: new InMemoryCache(),
  });

  // Probably not necessary, but it seems wise to clean up any resources
  // the client might have acquired during its construction.
  client.stop();

  // The CommonJS dist/core/core.cjs file is generated from ESM modules
  // generated by tsc, including dist/version.js, so verifying core.cjs
  // exports an ApolloClient class that defines client.version also serves to
  // verify that dist/version.js must have been correctly updated, which is
  // convenient because dist/version.js uses ECMAScript module syntax, and is
  // thus not importable in all versions of Node.js.
  assert.strictEqual(
    client.version,
    version,
    "Failed to update dist/version.js and dist/core/core.cjs"
  );
}
