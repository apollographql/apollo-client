version: 2.1

jobs:
  # Filesize:
  #   docker:
  #     - image: cimg/node:20.2.0
  #   steps:
  #     - checkout
  #     - run: npm version
  #     - run: npm ci
  #     - run: npm run bundlesize

  Circularity:
    docker:
      - image: cimg/node:23.7.0
    steps:
      - checkout
      - run: npm version
      - run: npm ci
      - run: npm run madge

  Publint:
    docker:
      - image: cimg/node:23.7.0
    steps:
      - checkout
      - run: npm version
      - run: npm ci
      - run: npm run build
      - run: npm run publint

  Lint:
    docker:
      - image: cimg/node:23.7.0
    steps:
      - checkout
      - run: npm version
      - run: npm ci
      - run: npm run lint

  Formatting:
    docker:
      - image: cimg/node:23.7.0
    steps:
      - checkout
      - run: npm ci
      - run: npm run check:format

  Tests:
    docker:
      - image: cimg/node:23.7.0
    parameters:
      project:
        type: string
    steps:
      - checkout
      - run: npm run ci:precheck
      - run: npm version
      - run: npm ci
      - run: npm run typecheck
      - run: if test "<< parameters.project >>" = "Core Tests"; then npm run test:memory; fi
      - run:
          name: Jest suite with coverage
          command: npm run test:ci -- --selectProjects "<< parameters.project >>"
          environment:
            JEST_JUNIT_OUTPUT_FILE: "reports/junit/js-test-results-<< parameters.project >>.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit
  Attest:
    docker:
      - image: cimg/node:23.7.0
    steps:
      - checkout
      - run: npm ci
      - run: npm run test:type-benches

  BuildTarball:
    docker:
      - image: cimg/node:23.7.0
    steps:
      - checkout
      - run: npm run ci:precheck
      - run: npm version
      - run: npm ci
      - run: npm run build && cd dist && mv "$(npm pack --json | jq --raw-output '.[0].filename')" apollo-client.tgz
      - persist_to_workspace:
          root: dist
          paths:
            - apollo-client.tgz

  IntegrationTests:
    parameters:
      framework:
        type: string
      react:
        type: string
    docker:
      - image: cimg/node:23.7.0-browsers
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run: npm version
      - run:
          # due to a bug with overrides that will be fixed in npm 11.2.0 (to be released) we need to install these everywhere manually
          #command: npm pkg set "overrides[@apollo/client]=/tmp/workspace/apollo-client.tgz"
          command: npm exec --workspaces -c 'jq -e ".dependencies[\"@apollo/client\"]" package.json && npm pkg set "dependencies[@apollo/client]=/tmp/workspace/apollo-client.tgz" || true'
          working_directory: integration-tests
      - run:
          command: |
            if [ "<< parameters.framework >>" != "cra4" ] && [ "<< parameters.framework >>" != "cra5" ]; then
              export VERSION=$(npm show react --json | jq '."dist-tags"."<< parameters.react >>"' -r)
              # due to a bug with overrides that will be fixed in npm 11.2.0 (to be released) we need to install these everywhere manually
              # npm pkg set "overrides[react]=${VERSION}" "overrides[react-dom]=${VERSION}"
              npm exec --workspaces -c 'jq -e ".dependencies.react" package.json && npm pkg set "dependencies[react]=${VERSION}" "dependencies[react-dom]=${VERSION}" || true'
            fi
          working_directory: integration-tests
      - run:
          command: npm run ci-preparations --workspace=<< parameters.framework >> --if-present
          working_directory: integration-tests
      - run:
          command: npm install --force
          working_directory: integration-tests
      - run:
          command: npx playwright install-deps
          working_directory: integration-tests
      - run:
          command: npx playwright install
          working_directory: integration-tests
      - run:
          command: npm run build --workspace=<< parameters.framework >> --if-present
          working_directory: integration-tests
      - run:
          command: npm run test --workspace=<< parameters.framework >>
          working_directory: integration-tests

  TestPeerDepTypes:
    parameters:
      externalPackage:
        type: string
    docker:
      - image: cimg/node:23.7.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/workspace
      - run:
          working_directory: integration-tests/peerdeps-tsc
          command: |
            npm install
            npm install @apollo/client@/tmp/workspace/apollo-client.tgz
            npm install << parameters.externalPackage >>
            npm test

workflows:
  Build and Test:
    jobs:
      # - Filesize
      - Tests:
          matrix:
            parameters:
              project:
                ["Core Tests", "ReactDOM 17", "ReactDOM 18", "ReactDOM 19"]
      - Attest
      - Formatting
      - Lint
      - BuildTarball
      - IntegrationTests:
          name: Integration Test << matrix.framework >> with React << matrix.react >>
          requires:
            - BuildTarball
          matrix:
            parameters:
              framework:
                - cra4
                - cra5
                - next
                - dual-module-test-esm
                - dual-module-test-standard
                - vite
                - vite-swc
                - wrapping-library
                # -browser-esm would need a package publish to npm/CDNs
              react:
                - latest
                - next
            exclude:
              - framework: cra4
                react: next
              # next ships it's own React version anyways, no need to run this test twice
              - framework: next
                react: next
      - TestPeerDepTypes:
          name: Test external types for << matrix.externalPackage >>
          requires:
            - BuildTarball
          matrix:
            parameters:
              externalPackage:
                - "graphql@15"
                - "graphql@16"
                - "graphql@^17.0.0-alpha"
                - "@types/react@17 @types/react-dom@17"
                - "@types/react@18 @types/react-dom@18"
                - "@types/react@19 @types/react-dom@19"
                - "typescript@next"
