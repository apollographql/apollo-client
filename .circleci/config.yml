version: 2

jobs:
  Danger:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - restore_cache:
          keys:
            # When lock file changes, use increasingly general patterns to
            # restore cache
            - npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v2-{{ .Branch }}-
            - npm-v2-
      - run: npm --version
      - run: npm ci
      - save_cache:
          key: npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            # This should cache the npm cache instead of node_modules, which is
            # needed because npm ci actually removes node_modules before
            # installing to guarantee a clean slate.
            - ~/.npm
      - run: npm run danger

  Filesize:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - restore_cache:
          keys:
            # When lock file changes, use increasingly general patterns to
            # restore cache
            - npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v2-{{ .Branch }}-
            - npm-v2-
      - run: npm --version
      - run: npm ci
      - save_cache:
          key: npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            # This should cache the npm cache instead of node_modules, which is
            # needed because npm ci actually removes node_modules before
            # installing to guarantee a clean slate.
            - ~/.npm
      - run: npm run filesize

  Apollo Client Monorepo:
    docker:
      - image: circleci/node:10
    steps:
      - checkout
      - restore_cache:
          keys:
            # When lock file changes, use increasingly general patterns to
            # restore cache
            - npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v2-{{ .Branch }}-
            - npm-v2-
      - run: npm --version
      - run: npm ci
      - save_cache:
          key: npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            # This should cache the npm cache instead of node_modules, which is
            # needed because npm ci actually removes node_modules before
            # installing to guarantee a clean slate.
            - ~/.npm
      - run:
          name: Jest suite with coverage
          command: npm run test-ci && npm run coverage:upload
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

workflows:
  version: 2
  Build and Test:
    jobs:
      - Danger
      - Filesize
      - Apollo Client Monorepo
