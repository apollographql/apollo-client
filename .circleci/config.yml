version: 2

jobs:
  Danger:
    docker: [ { image: 'circleci/node:8' } ]
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      # with this we can see if there are any changes to packages (or just docs)
      - run: ./.circleci/test.sh "packages/**/*" "npm run danger"

  Docs:
    docker: [ { image: 'circleci/node:8' } ]
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      # we skip any potential docs tests because the netlify build
      # will fail if there is some other problem
      # this is a place to verify the build including crawling for broken links
      # XXX replace with running and crawling docs site
      - run: ./.circleci/test.sh "docs/**/*" "cd docs && npm i && npm run build"
      
  Filesize:
    docker: [ { image: 'circleci/node:8' } ]
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: ./.circleci/test.sh "packages/**/*" "npm run compile && npm run filesize"
      
  Typecheck:
    docker: [ { image: 'circleci/node:8' } ]
    steps:
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run: ./.circleci/test.sh "packages/**/*" "npm run type-check"

  Apollo Client:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-npm
          command: npm install
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Jest suite
          command: ./.circleci/test.sh "packages/**/*" "npx lerna run --scope=apollo-client -- coverage -- --ci --testResultsProcessor=jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo Boost:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: npm run diff -- "packages/**/*" $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=apollo-boost -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo Cache:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: npm run diff -- "packages/**/*" $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=apollo-cache -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo InMemory Cache:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: npm run diff -- "packages/**/*" $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=apollo-cache-inmemory -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  Apollo Utilities:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: npm run diff -- "packages/**/*" $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=apollo-utilities -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

  GraphQL Anywhere:
    docker: [ { image: 'circleci/node:8' } ]
    steps: 
      - checkout
      - run: npm i 
      - run: npm run diff -- "packages/**/*" $CIRCLE_COMPARE_URL
      - run:
          name: Allow bypassed packages
          command: echo 'nothing changed that this package cares about'
          when: on_fail
      - run:
          name: Jest suite
          command: npx lerna run --scope=graphql-anywhere -- coverage -- --ci --testResultsProcessor="jest-junit"
          environment:
            JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      - store_test_results:
          path: reports/junit
      - store_artifacts:
          path: reports/junit

workflows:
  version: 2
  Build and Test:
    jobs:
      - Danger
      - Docs
      - Filesize
      - Typecheck
      - Apollo Client
      # - Apollo Boost
      # - Apollo Cache
      # - Apollo InMemory Cache
      # - Apollo Utilities
      # - GraphQL Anywhere

