// Eventually this file will be auto generated by codegen after adding the codegen plugin
import type { LocalState } from "@apollo/client/local-state";

import type { ContextValue } from "./context-value.js";

type Maybe<T> = T | null;

type Resolver<
  TResult,
  TParent = Record<string, unknown>,
  TArgs = Record<string, unknown>,
> = LocalState.Resolver<TResult, TParent, ContextValue, TArgs>;

export type Food = {
  __typename: "Food";
  categories?: Maybe<Array<FoodCategory>>;
  name?: Maybe<string>;
};

export type FoodCategoriesArgs = {
  limit?: Maybe<number>;
  offset: number;
};

export enum FoodCategory {
  Italian = "ITALIAN",
}

export type User = {
  __typename: "User";
  favoriteFood?: Maybe<Food>;
  isLoggedIn?: boolean;
};

type ParentTypes = {
  Food: Food;
  Query: Record<string, never>;
  User: User;
};

export type FoodResolvers<
  ParentType extends ParentTypes["Food"] = ParentTypes["Food"],
> = {
  categories?: Resolver<
    Maybe<Array<FoodCategory>>,
    ParentType,
    FoodCategoriesArgs
  >;
  name?: Resolver<Maybe<string>, ParentType>;
};

export type QueryResolvers = {
  currentUserId?: Resolver<Maybe<string>, ParentTypes["Query"]>;
};

export type UserResolvers = {
  favoriteFood?: Resolver<Maybe<Food>, ParentTypes["User"]>;
  isLoggedIn?: Resolver<boolean, ParentTypes["User"]>;
};

export type Resolvers = {
  Food?: FoodResolvers;
  Query?: QueryResolvers;
  User?: UserResolvers;
};
